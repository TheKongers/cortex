on:
  repository_dispatch:
    types: [corbench_start, corbench_stop]
name: Corbench Workflow
permissions:
  contents: read
env:
  AUTH_FILE: ${{ secrets.TEST_INFRA_PROVIDER_AUTH }}
  CLUSTER_NAME: corbench
  DOMAIN_NAME: corbench.cortex.io
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_ORG: TheKongers
  GITHUB_REPO: cortex
  GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
  LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}
  GKE_PROJECT_ID: 
  PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }}
  PROVIDER: eks
  CORTEX_TAG: ${{ github.event.client_payload.CORTEX_TAG }}
  ZONE: us-west-2
jobs:
  benchmark_start:
    name: Corbench Start
    if: github.event.action == 'corbench_start'
    runs-on: ubuntu-latest
    steps:
      - name: Update status to pending
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"pending",  "context": "corbench-status-update-start", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
      - name: Run make deploy to start corbench
        id: make_deploy
        uses: docker://corbench/corbench:latest
        with:
          args: >-
            until make all_nodes_deleted; do echo "waiting for nodepools to be deleted"; sleep 10; done;
            make deploy;
      - name: Update status to failure
        if: failure()
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"failure",  "context": "corbench-status-update-start", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
      - name: Update status to success
        if: success()
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"success",  "context": "corbench-status-update-start", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
  benchmark_cancel:
    name: Corbench Cancel
    if: github.event.action == 'corbench_stop'
    runs-on: ubuntu-latest
    steps:
      - name: Update status to pending
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"pending",  "context": "corbench-status-update-cancel", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
      - name: Run make clean to stop corbench
        id: make_clean
        uses: docker://corbench/corbench:latest
        with:
          args: >-
            until make all_nodes_running; do echo "waiting for nodepools to be created"; sleep 10; done;
            make clean;
      - name: Update status to failure
        if: failure()
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"failure",  "context": "corbench-status-update-cancel", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
      - name: Update status to success
        if: success()
        run: >-
          curl -i -X POST
          -H "Authorization: Bearer $GITHUB_TOKEN"
          -H "Content-Type: application/json"
          --data '{"state":"success",  "context": "corbench-status-update-cancel", "target_url": "'$GITHUB_STATUS_TARGET_URL'"}'
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
